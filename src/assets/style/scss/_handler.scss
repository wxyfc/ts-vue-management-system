@import "./_themes.scss";
@import "./_font.scss";
@import "./_layout.scss";

//遍历主题map
@mixin themeify {
  @each $theme-name, $theme-map in $themes {
    //!global 把局部变量强升为全局变量
    $theme-map: $theme-map !global;
    //判断html的data-theme的属性值  #{}是sass的插值表达式
    //& sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
    [data-theme="#{$theme-name}"] & { @content; }
  }
}

//声明一个根据Key获取颜色的function
@function get-themed($key) {
  @return map-get($theme-map, $key);
}

//获取背景颜色
@mixin _background($color) {
  @include themeify {
    background-color: get-themed($color) !important;
  }
}

//获取字体颜色
@mixin _color($color) {
  @include themeify {
    color: get-themed($color) !important;
  }
}

//获取边框颜色
@mixin _border_color($color) {
  @include themeify {
    border-color: get-themed($color) !important;
  }
}

//遍历字体map
@mixin fontify {
  @each $font-name, $font-map in $font {
    //!global 把局部变量强升为全局变量
    $font-map: $font-map !global;
    //判断html的data-theme的属性值  #{}是sass的插值表达式
    //& sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
    [data-font="#{$font-name}"] & { @content; }
  }
}

//声明一个根据Key获取字体的function
@function get-font($key) {
  @return map-get($font-map, $key);
}

//获取字体大小
@mixin _font-size($font) {
  @include fontify {
    font-size: get-font($font) !important;
  }
}

//遍历布局map
@mixin layoutify {
  @each $layout-name, $layout-map in $layout {
    //!global 把局部变量强升为全局变量
    $layout-map: $layout-map !global;
    //判断html的data-theme的属性值  #{}是sass的插值表达式
    //& sass嵌套里的父容器标识   @content是混合器插槽，像vue的slot
    [data-layout="#{$layout-name}"] & { @content; }
  }
}

//声明一个根据Key获取字体的function
@function get-layout($key) {
  @return map-get($layout-map, $key);
}

//获取布局排版
@mixin _layout {
  @include layoutify {
    grid-template-areas: get-layout('_grid-template-areas');
  }
}

@mixin _border-box-shadow {
  border: 0px solid rgba(0, 0, 0, .12);
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04);
}

@mixin pixel-solution {
  position: relative;
  &:before {
    width: 200%;
    height: 200%;
    left: 0;
    top: 0;
    position: absolute;
    content: '';
    border-radius: 4px;
    border: 1px solid rgba(0, 0, 0, .12);
    //box-shadow: 0 2px 4px rgba(0, 0, 0, .12), 0 0 6px rgba(0, 0, 0, .04);
    transform: scale(0.5);
    transform-origin: 0 0;

    //transform: rotate(45deg);
    //transform-origin:20% 40%;
    //
    //-ms-transform: rotate(45deg); 		/* IE 9 */
    //-ms-transform-origin:20% 40%; 		/* IE 9 */
    //
    //-webkit-transform: rotate(45deg);	/* Safari 和 Chrome */
    //-webkit-transform-origin:20% 40%;	/* Safari 和 Chrome */
    //
    //-moz-transform: rotate(45deg);		/* Firefox */
    //-moz-transform-origin:20% 40%;		/* Firefox */
    //
    //-o-transform: rotate(45deg);		/* Opera */
    //-o-transform-origin:20% 40%;
  }
}

